@page "/games"

@inject HttpClient Http
@inject IModalService Modal
@inject NavigationManager NavigationManager

<h3>Games</h3>

<div class="container">
    <div class="row">
        <button @onclick="NewGame" class="btn btn-success ml-5 mb-4">New Game</button>
    </div>

    @if (games == null)
    {
        <div>Loading games list</div>
    }
    else
    {
        <div>
            <h5>Active Games:</h5>
        </div>
        @if (games.ActiveGames.Count() == 0)
        {
            <p>You don't have any active games</p>
        }
        else
        {
            foreach (var game in games.ActiveGames)
            {
                <GameRow Game=game />
            }
        }
        <hr />
        <div>
            <h5>Recently Finished Games:</h5>
        </div>
        @if (games.RecentGames.Count() == 0)
        {
            <p>You don't have any recent games</p>
        }
        else
        {
            foreach (var game in games.RecentGames)
            {
                <GameRow Game=game />
            }
        }
    }
</div>

@code {
    private GameListDto games;
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/movehub"))
            .Build();

        hubConnection.On<string, int>("ReceiveMove", async (userId, gameId) =>
        {
            if (games?.MyUserId == userId)
            {
                await LoadGameList();
                StateHasChanged();
            }
        });

        await hubConnection.StartAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadGameList();
    }

    private async Task LoadGameList()
    {
        games = await Http.GetFromJsonAsync<GameListDto>($"/api/game");
    }

    public async Task NewGame()
    {
        var result = await Modal.Show<NewOpponent>("New Game").Result;
        if (!result.Cancelled)
        {
            var newGameId = (int)(result.Data);

            NavigationManager.NavigateTo($"/game/{newGameId}");
        }
    }
}
