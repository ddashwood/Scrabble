@page "/game/{gameId:int}"

@using System.Linq
@using System.Text

@inject HttpClient Http
@inject IModalService Modal
@inject IMapper mapper
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime;


@if (gameVm == null)
{
    <p>Loading game</p>
}
else
{
    <GameMessage BootstrapContext="@gameVm.MessageBootstrapContext" Game="@gameVm.Game">
        @gameVm.Message
    </GameMessage>

    <div class="game" id="game">
        <div class="game-element-container">
            <div class="board">
                @for (int y = 0; y < GameBase.BOARD_HEIGHT; y++)
                {
                    <div class="tile-row">
                        @for (int x = 0; x < GameBase.BOARD_WIDTH; x++)
                        {
                            var tileVm = gameVm.GetBoardTile(x, y);
                            <TileSpace TileVm=tileVm OnClick=tileVm.OnClick />
                        }
                    </div>
                }

                @*Not really part of the board, but including it in the board
                    div means it aligns with the board*@
                <div class="float-left mt-4">Tiles remaining: @gameVm.Game.TilesRemaining</div>
                @if (gameVm.IsSwapping)
                {
                    <div class="float-right mt-4">Select tiles to swap</div>
                }
            </div>
        </div>

        <div class="game-element-container">
            <div class="player-tiles">
                <div class="tile-row">
                    @for (int i = 0; i < gameVm.Game.MyTiles.Length; i++)
                    {
                        var tileVm = gameVm.GetRackTile(i);
                        <TileSpace TileVm=tileVm OnClick=tileVm.OnClick />
                    }
                </div>
            </div>
        </div>

        <div class="buttons mt-4 mb-2">
            @if (gameVm.Game.Winner == WinnerDto.NotFinished)
            {
                if (gameVm.IsSwapping)
                {
                    <button @onclick=StopSwap>Cancel</button>
                    <button @onclick=DoSwap disabled="@(!gameVm.SwappingTiles.Any(t => t))">Swap</button>

                }
                else if (gameVm.Game.Move.Placements.Count() == 0)
                {
                    <button @onclick=Pass disabled="@(!gameVm.Game.MyMove)">Pass</button>
                    <button @onclick=StartSwap disabled="@(!gameVm.Game.MyMove || !gameVm.CanSwap)">Swap</button>
                }
                else
                {
                    <button @onclick=Play disabled="@(!gameVm.Game.MyMove  || !gameVm.IsValidMove)">Play</button>
                    <button @onclick=Recall>Recall</button>
                }
                <button @onclick=Resign>Resign</button>
            }
            else
            {
                <button @onclick=Rematch>Rematch</button>
            }
        </div>
    </div>
}

@code {
    private static Func<Task> reconnectAction;
    [Parameter] public int GameId { get; set; }
    GameViewModel gameVm;
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await SetupHub();
        reconnectAction = ReconnectActionAsync;
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadGameAsync();
    }

    private async Task LoadGameAsync()
    {
        var data = await Http.GetFromJsonAsync<GameDto>($"/api/game/{GameId}");
        var game = new Game(data, mapper);
        gameVm = new GameViewModel(game, GetBlankTileLetter, StateHasChanged, JSRuntime);
    }

    private void Recall()
    {
        // Restore the tiles to their original list, and create a new, blank move
        gameVm.Game.MyTiles = (char[])gameVm.Game.MyOriginalTiles.Clone();
        gameVm.Game.Move = new MoveBase(gameVm.Game);
        gameVm.TileBeingMoved = null;

        gameVm.UpdateMessage();
    }

    private void StartSwap()
    {
        gameVm.TileBeingMoved = null;
        gameVm.StartSwapping();
    }

    private void StopSwap()
    {
        gameVm.StopSwapping();
    }

    private async Task DoSwap()
    {
        StringBuilder swapTiles = new StringBuilder();
        for (int i = 0; i < gameVm.SwappingTiles.Length; i++)
        {
            if (gameVm.SwappingTiles[i])
            {
                swapTiles.Append(gameVm.Game.MyTiles[i]);
            }
        }
        await Submit($"/api/swap/{GameId}", swapTiles.ToString(), "Swap completed");
    }

    private async Task Play()
    {
        gameVm.TileBeingMoved = null;
        await Submit($"/api/move/{GameId}", gameVm.Game.Move.Placements, "Move completed");
    }

    private async Task Pass()
    {
        var result = await Modal.Show<ConfirmationDialogue>("Are you sure you want to pass?").Result;
        if (!result.Cancelled)
        {
            await Submit<object>($"/api/pass/{GameId}", null, null);
        }
    }

    private async Task Resign()
    {
        var result = await Modal.Show<ConfirmationDialogue>("Are you sure you want to resign?").Result;
        if (!result.Cancelled)
        {
            await Submit<object>($"/api/resign/{GameId}", null, null);
        }
    }

    private async Task Submit<T>(string requestUri, T value, string successMessage)
    {
        var response = await Http.PostAsJsonAsync(requestUri, value);
        var responseData = await response.Content.ReadFromJsonAsync<MoveResultDto>();
        if (response.StatusCode == System.Net.HttpStatusCode.UnprocessableEntity)
        {
            gameVm.Message = responseData.Error;
            gameVm.MessageBootstrapContext = "danger";
        }
        else if (response.StatusCode != System.Net.HttpStatusCode.OK)
        {
            gameVm.Message = "Something went wrong";
            gameVm.MessageBootstrapContext = "danger";
        }
        else
        {
            // Success - reload the board (including new tiles)
            var game = new Game(responseData.GameDto, mapper);
            gameVm = new GameViewModel(game, GetBlankTileLetter, StateHasChanged, JSRuntime);
            if (successMessage == null)
            {
                gameVm.UpdateMessage();
            }
            else
            {
                gameVm.Message = successMessage;
                gameVm.MessageBootstrapContext = "success";
            }
        }
        // If the contents of the message box have changed, this can result in the board
        // scrolling off the screen. Here, we ensure that the board stays in the same
        // position
        await JSRuntime.InvokeVoidAsync("scrollPreventer.saveTop", "game");
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("scrollPreventer.restoreTop", "game");

    }

    // Passed to the GameViewModel, which uses it to prompt user for a letter for a blank tile
    private async Task<char> GetBlankTileLetter()
    {
        var result = await Modal.Show<BlankLetterSelector>("Select a Letter").Result;
        if (result.Cancelled)
        {
            return '#';
        }
        else
        {
            return (char)result.Data;
        }
    }

    private async Task Rematch()
    {
        var response = await Http.PostAsync($"/api/game?rematch={GameId}", null);
        var responseData = await response.Content.ReadFromJsonAsync<NewGameDto>();
        if (response.StatusCode != System.Net.HttpStatusCode.OK)
        {
            throw new ApplicationException("Error " + responseData.Error);
        }

        NavigationManager.NavigateTo($"/game/{responseData.NewGameId}");
    }

    [JSInvokable]
    public static async Task RefreshConnectionAsync()
    {
        if (reconnectAction != null)
        {
            await (reconnectAction?.Invoke());
        }
    }

    private async Task ReconnectActionAsync()
    {
        if (hubConnection == null)
        {
            return;
        }

        // On mobiles, the hub can disconnect when the browser is closed. This will re-start it.
        await hubConnection.StopAsync();
        await LoadGameAsync();
        gameVm.UpdateMessage();
        StateHasChanged();
        await SetupHub();
    }

    private async Task SetupHub()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/movehub"))
            .Build();

        hubConnection.On<string, int>("ReceiveMove", async (userId, gameId) =>
        {
            if (gameVm.Game.MyUserId == userId && gameId == GameId)
            {
                await LoadGameAsync();
                gameVm.UpdateMessage();
                StateHasChanged();
            }
        });

        await hubConnection.StartAsync();
    }
}